<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>User Guides on Gloo Docs</title>
    <link>https://gloo.solo.io/0.7/user_guides/</link>
    <description>Recent content in User Guides on Gloo Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://gloo.solo.io/0.7/user_guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Routing</title>
      <link>https://gloo.solo.io/0.7/user_guides/basic_routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gloo.solo.io/0.7/user_guides/basic_routing/</guid>
      <description>Gateway Routing API Gateways can route incoming traffic to backend services. Gloo can automatically discover backend services based on plugins that it uses that know intimate details about the platform or environment on which it&amp;rsquo;s running. In this tutorial we look at Gloo&amp;rsquo;s basic upstream discovery and routing capabilities. For more advanced function routing, take a look at the function routing tutorial.
What you&amp;rsquo;ll need  kubectl Kubernetes v1.11.3+ deployed somewhere.</description>
    </item>
    
    <item>
      <title>Function Routing</title>
      <link>https://gloo.solo.io/0.7/user_guides/function_routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gloo.solo.io/0.7/user_guides/function_routing/</guid>
      <description>Function Routing Gloo builds on top of Envoy proxy by giving it the ability to understand functions belonging to upstream clusters. Envoy (and most other gateways) are great at routing to backend clusters/services, but they don&amp;rsquo;t know what functions (REST, gRPC, SOAP, etc) are exposed at each of those clusters/services. Gloo can dynamically discover and understand the details of a Swagger or gRPC reflection, which can help make routing easier.</description>
    </item>
    
    <item>
      <title>External API Routing</title>
      <link>https://gloo.solo.io/0.7/user_guides/external_api_routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gloo.solo.io/0.7/user_guides/external_api_routing/</guid>
      <description>External API Routing In this tutorial, we&amp;rsquo;ll take a look at routing to services that live outside of your deployment platform and that have not been configured for automatic discovery. You can consider that these could be existing monoliths or static endpoints that do not lend themselves easily to be discovered. Gloo&amp;rsquo;s power comes from it&amp;rsquo;s ability to live in unpredictable and dynamic environments just fine, but for those use cases where we need to explicitly add upstreams, we can do that following these steps.</description>
    </item>
    
    <item>
      <title>Ingress Routing</title>
      <link>https://gloo.solo.io/0.7/user_guides/basic_ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gloo.solo.io/0.7/user_guides/basic_ingress/</guid>
      <description>Kubernetes Ingress Controllers are used for simple traffic routing into a kubernetes cluster. When Gloo is installed with the glooctl install ingress command, Gloo will configure Envoy as a Kubernetes Ingress Controller, supporting Ingress objects written with the annotation kubernetes.io/ingress.class: gloo.
What you&amp;rsquo;ll need  kubectl Kubernetes v1.11.3+ deployed somewhere. Minikube is a great way to get a cluster up quickly.  Steps  The Gloo Ingress installed and running on Kubernetes.</description>
    </item>
    
    <item>
      <title>Gloo with Knative</title>
      <link>https://gloo.solo.io/0.7/user_guides/gloo_with_knative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gloo.solo.io/0.7/user_guides/gloo_with_knative/</guid>
      <description>Google&amp;rsquo;s Knative project leverages a Kubernetes Cluster Ingress Controller to route requests to apps managed and autoscaled by Knative. At the time of writing, the only available options for Cluster Ingress are Istio and Gloo. This tutorial explains how to get started using Gloo as your Knative Cluster Ingress.
What you&amp;rsquo;ll need  kubectl Kubernetes v1.11.3+ deployed somewhere. Minikube is a great way to get a cluster up quickly. Docker installed and running on your local machine, and a Docker Hub account configured (we&amp;rsquo;ll use it for a container registry).</description>
    </item>
    
  </channel>
</rss>